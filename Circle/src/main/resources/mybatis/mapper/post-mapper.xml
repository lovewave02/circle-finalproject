<?xml version="1.0" encoding="UTF-8" ?>

<!-- DTD 선언 -->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper라는 영역 안에 구문을 작성한다 - namespace : mapper간의 충돌을 방지 하기 위한 이름 (필수) -->
<mapper namespace="post">



	<!-- TEST -->

	<!-- 게시판 메인 불러오기 -->

	<select id="postMain" resultType="post">

		select *
		from post p, emp_info
		e, post_type t
		where p.post_emp =
		e.emp_info_emp_no
		and p.post_type =
		t.post_type_code
		and p.post_type in
		('POTY000001', 'POTY000002')
		order by
		p.post_code desc
	</select>
	

	<!-- 부분 게시판 -->
	<select id="postParts" parameterType="string" resultType="post">
		select
		*
		from post p
		join emp_info e on (p.post_emp = e.emp_info_emp_no)
		join
		post_type t on (p.post_type = t.post_type_code)
		where p.post_type =
		#{post_type}
		order by p.post_code desc
	</select>


	<!-- 총 게시글 갯수 -->
	<select id="postCount" resultType="int">
		select count(*)
		from post
	</select>


	<!-- 페이징 처리 후 게시글 조회 -->
	<select id="postSelect" parameterType="postPaging"
		resultType="post">
		select *
		from (
		select rownum rn, a.*
		from (
		select *
		from post
		p
		join emp_info e
		on (p.post_emp =
		e.emp_info_emp_no)
		join post_type t on
		(p.post_type =
		t.post_type_code)
		where p.post_type in
		('POTY000001',
		'POTY000002')
		order by post_code desc
		) a
		)
		where rn between #{start} and
		#{end}

	</select>
	<select id="postSelect2" parameterType="postPaging"
		resultType="post">
		select *
		from (
		select rownum rn, a.*
		from (
		select *
		from post
		p
		join emp_info e
		on (p.post_emp = e.emp_info_emp_no)
		join
		post_type t on
		(p.post_type =
		t.post_type_code)
		where p.post_type =
		#{post_type}
		order by
		post_code desc
		) a
		)
		where rn between
		#{start} and #{end}

	</select>
	
		<select id="postSelect3" parameterType="postPaging"
		resultType="post">
		select post_type_title
		from post_type
		where post_type_code = #{post_type}

	</select>
	


	<!-- postList 호출 -->
	<select id="postList" resultType="post">
		select *
		from post p, emp_info
		e, post_type t
		where p.post_emp = e.emp_info_emp_no
		and p.post_type =
		t.post_type_code
		order by post_code desc
	</select>


	<!-- insert -->

	<insert id="postInsert" parameterType="post">

		INSERT INTO
		POST(POST_CODE, POST_EMP, POST_TYPE, POST_TITLE, POST_COMT,
		POST_WDAT,
		POST_MDAT, POST_CVP, POST_SEC, POST_NOTI, POST_CODE_REF,
		POST_STAT)
		VALUES(CONCAT('POST', LPAD(POST_SEQ.NEXTVAL, 6, 0)), #{post_emp},
		#{post_type},
		#{post_title}, #{post_comt} , DEFAULT ,TO_DATE('',
		'YYYY/MM/DD'), 0,
		#{post_sec}, 'N', '', 'N')
	</insert>

	<select id="postType" resultType="postType">
		select *
		from post_type

	</select>

	<select id="empInfo" resultType="string" parameterType="string">
		select
		emp_info_name
		from emp_info
		where emp_info_emp_no = #{emp_no}

	</select>

	<select id="empNo" resultType="String" parameterType="string">
		 select emp_info_emp_no
		from  emp_info 
		where emp_info_emp_no =  #{emp_no}

	</select>
	
	<select id="viewEmpNo"  resultType="String" parameterType="string">
	select post_emp
	from post
	where post_code = #{post_code}
	</select>


	<!-- view -->
	<!-- 게시글 상세보기 -->

	<select id="postView" resultType="post" parameterType="string">
		select *
		from post p
		join post_type t on (p.post_type = t.post_type_code)
		join
		emp_info e on (p.post_emp = e.emp_info_emp_no)
		join dept_info d on
		(e.emp_info_dept_code = d.dept_info_code)
		where p.post_code =
		#{post_code}
	</select>


	<update id="CountDetail">
		update post
		set post_cvp = post_cvp + 1
		where post_code
		= #{post_code}

	</update>

	<!-- update -->

	<update id="postUpdate" parameterType="post">
		update post
		set post_title
		= #{post_title}, post_comt=#{post_comt},
		post_sec=#{post_sec},
		post_mdat=SYSDATE
		where post_code = #{post_code}
	</update>

	<select id="postCheck" parameterType="string" resultType="post">
		select
		*
		from post p
		join post_type t on (p.post_type = t.post_type_code)
		join
		emp_info e on (p.post_emp = e.emp_info_emp_no)
		where p.post_code =
		#{post_code}
	</select>

	<!-- 삭제 -->

	<delete id="postDelete" parameterType="string">
		delete from post where
		post_code = #{post_code}


	</delete>
	<delete id="postDelete2" parameterType="string">
		delete from post_repl
		where post_repl_post = #{post_code}
	</delete>


	<!-- 검색 -->
	<sql id="postSearch">
		<trim prefixOverrides="OR" suffix=") AND " prefix="(">
			<foreach collection="typeArr" item="type">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">post_title like '%'||#{keyword}||'%' </when>
						<when test="type == 'C'.toString()">post_comt like '%'||#{keyword}||'%' </when>
						<when test="type == 'W'.toString()">post_emp like '%'||#{keyword}||'%' </when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

	<select id="getSearch" resultType="post"
		parameterType="postPaging">

		select *
		from post p
		join emp_info e on (p.post_emp = e.emp_info_emp_no)
		<where>
			<if test="type != null and keyword != null">
				<choose>
					<when test="type == 'post_title'">
						${type} like '%'||#{keyword}||'%'
					</when>
					<when test="type == 'post_comt'">
						${type} like '%'||#{keyword}||'%'
					</when>
					<when test="type == 'emp_info_name'">
						${type} like '%'||#{keyword}||'%'
					</when>
				</choose>
			</if>
		</where>
	</select>

	<select id="countSearch" resultType="int">
		select count(*)
		from post
	</select>


</mapper>